name: 云编译Openwrt22.03官方固件+插件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      model:
        description: '选择机型'
        required: true
        default: 'miwifi-3c' 
        type: choice
        options:
          - 'miwifi-3'
          - 'miwifi-3c'
          - 'Redmi_AC2100'
          - 'K2P'
      UPLOAD_BIN_DIR:
        type: boolean
        description: '上传bin文件夹'
        required: false
        default: 'false'
      UPLOAD_FIRMWARE:
        type: boolean
        description: '上传固件'
        required: false
        default: 'true'
      UPLOAD_COWTRANSFER:
        type: boolean
        description: '上传COWTRANSFER'
        required: false
        default: 'false'
      UPLOAD_WETRANSFER:
        type: boolean
        description: '上传WETRANSFER'
        required: false
        default: 'false'
      UPLOAD_RELEASE:
        type: boolean
        description: '上传RELEASE'
        required: false
        default: 'true'
      
env:
  REPO_URL: https://github.com/yyx248131667/Lienolopenwrt
  REPO_BRANCH: 22.03
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/21.02/Yuos_x86.config
  DIY_P1_SH: xdiy-part1.sh
  DIY_P2_SH: xdiy-part2.sh
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libip4tc2 libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools clang
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
        sudo apt-get install -y gcc-13
        sudo apt-get install -y g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds clean && ./scripts/feeds update -a
      
    - name: Add luci-theme-netgear
      run: |
        cd openwrt
        git clone -b master https://github.com/yuos-bit/luci-theme-netgear.git feeds/kenzo/luci-theme-netgear

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
     - name: 云编译设置
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}    

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8

    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: Check space usage
      run: | 
        df -hT
        
    - name: Upload bin directory
      uses: actions/upload-artifact@v2
      if: steps.compile.outcome == 'success' && ${{ github.event.inputs.UPLOAD_BIN_DIR }} == 'true' && !cancelled()
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      if: steps.compile.outcome == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@v2
      if: steps.organize.outcome == 'success' && ${{ github.event.inputs.UPLOAD_FIRMWARE }} == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      if: steps.organize.outcome == 'success' && ${{ github.event.inputs.UPLOAD_COWTRANSFER }} == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https)" >> $GITHUB_ENV

    - name: Upload firmware to wetransfer
      if: steps.organize.outcome == 'success' && ${{ github.event.inputs.UPLOAD_WETRANSFER }} == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet --no-progress -p 1 ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https)" >> $GITHUB_ENV

    - name: Create GitHub release
      if: steps.compile.outcome == 'success' && ${{ github.event.inputs.UPLOAD_RELEASE }} == 'true' && !cancelled()
      uses: softprops/action-gh-release@v2
      with:
        files: |
          openwrt/bin/targets/*/*
        tag_name: ${{ env.FILE_DATE }}
        release_name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up
      if: always()
      run: |
        sudo sync && sudo sysctl vm.drop_caches=3
